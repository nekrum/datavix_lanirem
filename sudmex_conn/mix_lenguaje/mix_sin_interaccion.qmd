---
title: "Combinación de Lenguajes"
author: "Edgar"
date: "2022-10-16"
format: 
  html:
    self-contained: true
    code-fold: false
    toc: true
    toc-title: Contenido
    toc-location: left
    df-print: paged
    theme:
      light: flatly
      dark: darkly
    reference-location: margin
    citation-location: margin
---

## Objetivo

Probar el uso de **chunk's** de código de Python y R en el mismo documento. 


## Código

La ejecución de código de cada lenguaje la llevan acabo motores que **Quarto** usa para interpretar cada comando. 
[**Knitr** es una herramienta para la generación de reportes dinámicos que permite integrar R en documentos]{.aside}
Por defecto se usa **Knitr** para ejecutar los chunks de código R y el kernel de **Jupyter** [**Jupyter** es un 
component de Jupyter Notebook siendo este un entorno interactivo de python basado en web]{.aside} para ejecutar los 
fragmentos de código Python. 

En un inicio parece que el solo mezclar chunks de código de estos lenguajes en el mismo documento 
podría interpretar adecuadamente los comandos, pero al generar el archivo o previsualizarlo **Quarto** resuelve con un
error que recomienda el uso de **reticulate**.[**Reticulate** es un programa que permite la ejecución de código Python
dentro de R]{.aside}

Se puede evitar este error usando la opción `#| python.reticulate = FALSE` sin embargo esto permite la ejecución 
del código pero sin interactuar. Es decir una variable creada por R no la puede usar Python y viceversa.
[En Quarto la sintaxis `#|` dentro de un chunk de código proporciona opciones de ejecución a ese fragmento de código]{.aside}


###  Código R

La ejecución de R solo requiere un interprete de comandos disponible para proceder:

```{r}
x <- installed.packages()[,1]
x[1:5]
```

### Código Python

El chunk de python usará el interprete de comandos disponible en el sistema a menos que durante la ejecución del 
comando de previsualización/generación del archivo con **Quarto** se tenga activo un ambiente virtual como
**conda** o **virtualenv**.[En teoría también debe funcionar con **pipenv** u otros ambientes virtuales para Python]{.aside}

```{python}
#| python.reticulate = FALSE
print([1,2,3,4])
```

### Interacción

Sin embargo una ejecución directa como esta tiene sus desventajas, las variables resultantes de cualquiera de estos
fragmentos de código no podrán ser usadas por otros fragmentos. Generando un error que cancela la ejecución del comando
**Quarto** sin generar un archivo de salida.

```{{python}}
#| python.reticulate = FALSE
print(x)
```

Esto ocurre aun si usamos la sintaxis de `reticulate` para usar las variables entre los chunk's [Reticulate usa
`r.variable` o `py$variable` para acceder a las variables en los ambientes R y python]{.aside}

```{{python}}
#| python.reticulate = FALSE
print(r.x)
```

## Resultado

Es posible ejecutar código Python con solo crear los chunk de código y agregar la opción `#| python.reticulate = FALSE` 
pero el resultado de estos no se puede usar en fragmentos de código de otro lenguaje.

:::{.callout-warning}
Ejecutar código R solo requiere el interprete de comandos instalado, aunque la ejecución de **Quarto** es compatible con
`renv()`.
Python puede usar el interprete instalado de sistema o un ambiente virtual siempre que **Quarto** se ejecute con el 
ambiente cargado
:::